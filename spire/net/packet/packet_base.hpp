// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKETBASE_SPIRE_NET_PACKET_H_
#define FLATBUFFERS_GENERATED_PACKETBASE_SPIRE_NET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "client_join.hpp"
#include "entity_action.hpp"
#include "entity_despawn.hpp"
#include "entity_movement.hpp"
#include "entity_spawn.hpp"

namespace spire {
namespace net {
namespace packet {

struct PacketBase;
struct PacketBaseBuilder;

enum class PacketType : uint8_t {
  NONE = 0,
  ClientJoin = 1,
  EntityAction = 2,
  EntityDespawn = 3,
  EntityMovement = 4,
  EntitySpawn = 5,
  MIN = NONE,
  MAX = EntitySpawn
};

inline const PacketType (&EnumValuesPacketType())[6] {
  static const PacketType values[] = {
    PacketType::NONE,
    PacketType::ClientJoin,
    PacketType::EntityAction,
    PacketType::EntityDespawn,
    PacketType::EntityMovement,
    PacketType::EntitySpawn
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[7] = {
    "NONE",
    "ClientJoin",
    "EntityAction",
    "EntityDespawn",
    "EntityMovement",
    "EntitySpawn",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType::NONE, PacketType::EntitySpawn)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

template<typename T> struct PacketTypeTraits {
  static const PacketType enum_value = PacketType::NONE;
};

template<> struct PacketTypeTraits<spire::net::packet::ClientJoin> {
  static const PacketType enum_value = PacketType::ClientJoin;
};

template<> struct PacketTypeTraits<spire::net::packet::EntityAction> {
  static const PacketType enum_value = PacketType::EntityAction;
};

template<> struct PacketTypeTraits<spire::net::packet::EntityDespawn> {
  static const PacketType enum_value = PacketType::EntityDespawn;
};

template<> struct PacketTypeTraits<spire::net::packet::EntityMovement> {
  static const PacketType enum_value = PacketType::EntityMovement;
};

template<> struct PacketTypeTraits<spire::net::packet::EntitySpawn> {
  static const PacketType enum_value = PacketType::EntitySpawn;
};

bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type);
bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<PacketType> *types);

struct PacketBase FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBaseBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_BASE_TYPE = 4,
    VT_PACKET_BASE = 6
  };
  spire::net::packet::PacketType packet_base_type() const {
    return static_cast<spire::net::packet::PacketType>(GetField<uint8_t>(VT_PACKET_BASE_TYPE, 0));
  }
  const void *packet_base() const {
    return GetPointer<const void *>(VT_PACKET_BASE);
  }
  template<typename T> const T *packet_base_as() const;
  const spire::net::packet::ClientJoin *packet_base_as_ClientJoin() const {
    return packet_base_type() == spire::net::packet::PacketType::ClientJoin ? static_cast<const spire::net::packet::ClientJoin *>(packet_base()) : nullptr;
  }
  const spire::net::packet::EntityAction *packet_base_as_EntityAction() const {
    return packet_base_type() == spire::net::packet::PacketType::EntityAction ? static_cast<const spire::net::packet::EntityAction *>(packet_base()) : nullptr;
  }
  const spire::net::packet::EntityDespawn *packet_base_as_EntityDespawn() const {
    return packet_base_type() == spire::net::packet::PacketType::EntityDespawn ? static_cast<const spire::net::packet::EntityDespawn *>(packet_base()) : nullptr;
  }
  const spire::net::packet::EntityMovement *packet_base_as_EntityMovement() const {
    return packet_base_type() == spire::net::packet::PacketType::EntityMovement ? static_cast<const spire::net::packet::EntityMovement *>(packet_base()) : nullptr;
  }
  const spire::net::packet::EntitySpawn *packet_base_as_EntitySpawn() const {
    return packet_base_type() == spire::net::packet::PacketType::EntitySpawn ? static_cast<const spire::net::packet::EntitySpawn *>(packet_base()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_BASE_TYPE, 1) &&
           VerifyOffset(verifier, VT_PACKET_BASE) &&
           VerifyPacketType(verifier, packet_base(), packet_base_type()) &&
           verifier.EndTable();
  }
};

template<> inline const spire::net::packet::ClientJoin *PacketBase::packet_base_as<spire::net::packet::ClientJoin>() const {
  return packet_base_as_ClientJoin();
}

template<> inline const spire::net::packet::EntityAction *PacketBase::packet_base_as<spire::net::packet::EntityAction>() const {
  return packet_base_as_EntityAction();
}

template<> inline const spire::net::packet::EntityDespawn *PacketBase::packet_base_as<spire::net::packet::EntityDespawn>() const {
  return packet_base_as_EntityDespawn();
}

template<> inline const spire::net::packet::EntityMovement *PacketBase::packet_base_as<spire::net::packet::EntityMovement>() const {
  return packet_base_as_EntityMovement();
}

template<> inline const spire::net::packet::EntitySpawn *PacketBase::packet_base_as<spire::net::packet::EntitySpawn>() const {
  return packet_base_as_EntitySpawn();
}

struct PacketBaseBuilder {
  typedef PacketBase Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_base_type(spire::net::packet::PacketType packet_base_type) {
    fbb_.AddElement<uint8_t>(PacketBase::VT_PACKET_BASE_TYPE, static_cast<uint8_t>(packet_base_type), 0);
  }
  void add_packet_base(::flatbuffers::Offset<void> packet_base) {
    fbb_.AddOffset(PacketBase::VT_PACKET_BASE, packet_base);
  }
  explicit PacketBaseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PacketBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PacketBase>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PacketBase> CreatePacketBase(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    spire::net::packet::PacketType packet_base_type = spire::net::packet::PacketType::NONE,
    ::flatbuffers::Offset<void> packet_base = 0) {
  PacketBaseBuilder builder_(_fbb);
  builder_.add_packet_base(packet_base);
  builder_.add_packet_base_type(packet_base_type);
  return builder_.Finish();
}

struct PacketBase::Traits {
  using type = PacketBase;
  static auto constexpr Create = CreatePacketBase;
};

inline bool VerifyPacketType(::flatbuffers::Verifier &verifier, const void *obj, PacketType type) {
  switch (type) {
    case PacketType::NONE: {
      return true;
    }
    case PacketType::ClientJoin: {
      auto ptr = reinterpret_cast<const spire::net::packet::ClientJoin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType::EntityAction: {
      auto ptr = reinterpret_cast<const spire::net::packet::EntityAction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType::EntityDespawn: {
      auto ptr = reinterpret_cast<const spire::net::packet::EntityDespawn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType::EntityMovement: {
      auto ptr = reinterpret_cast<const spire::net::packet::EntityMovement *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType::EntitySpawn: {
      auto ptr = reinterpret_cast<const spire::net::packet::EntitySpawn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<PacketType> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketType(
        verifier,  values->Get(i), types->GetEnum<PacketType>(i))) {
      return false;
    }
  }
  return true;
}

inline const spire::net::packet::PacketBase *GetPacketBase(const void *buf) {
  return ::flatbuffers::GetRoot<spire::net::packet::PacketBase>(buf);
}

inline const spire::net::packet::PacketBase *GetSizePrefixedPacketBase(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<spire::net::packet::PacketBase>(buf);
}

inline bool VerifyPacketBaseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<spire::net::packet::PacketBase>(nullptr);
}

inline bool VerifySizePrefixedPacketBaseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<spire::net::packet::PacketBase>(nullptr);
}

inline void FinishPacketBaseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::PacketBase> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBaseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::PacketBase> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packet
}  // namespace net
}  // namespace spire

#endif  // FLATBUFFERS_GENERATED_PACKETBASE_SPIRE_NET_PACKET_H_
