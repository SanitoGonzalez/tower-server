// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYSPAWN_SPIRE_NET_PACKET_H_
#define FLATBUFFERS_GENERATED_ENTITYSPAWN_SPIRE_NET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace spire {
namespace net {
namespace packet {

struct EntitySpawn;
struct EntitySpawnBuilder;

struct EntitySpawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntitySpawnBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_TYPE = 4,
    VT_ENTITY_ID = 6,
    VT_POSITION = 8,
    VT_DIRECTION = 10,
    VT_ENTITY_NAME = 12
  };
  spire::net::packet::EntityType entity_type() const {
    return static_cast<spire::net::packet::EntityType>(GetField<uint8_t>(VT_ENTITY_TYPE, 0));
  }
  uint32_t entity_id() const {
    return GetField<uint32_t>(VT_ENTITY_ID, 0);
  }
  const spire::net::packet::Vector2 *position() const {
    return GetStruct<const spire::net::packet::Vector2 *>(VT_POSITION);
  }
  const spire::net::packet::Vector2 *direction() const {
    return GetStruct<const spire::net::packet::Vector2 *>(VT_DIRECTION);
  }
  const ::flatbuffers::String *entity_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENTITY_TYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_ENTITY_ID, 4) &&
           VerifyField<spire::net::packet::Vector2>(verifier, VT_POSITION, 4) &&
           VerifyField<spire::net::packet::Vector2>(verifier, VT_DIRECTION, 4) &&
           VerifyOffset(verifier, VT_ENTITY_NAME) &&
           verifier.VerifyString(entity_name()) &&
           verifier.EndTable();
  }
};

struct EntitySpawnBuilder {
  typedef EntitySpawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entity_type(spire::net::packet::EntityType entity_type) {
    fbb_.AddElement<uint8_t>(EntitySpawn::VT_ENTITY_TYPE, static_cast<uint8_t>(entity_type), 0);
  }
  void add_entity_id(uint32_t entity_id) {
    fbb_.AddElement<uint32_t>(EntitySpawn::VT_ENTITY_ID, entity_id, 0);
  }
  void add_position(const spire::net::packet::Vector2 *position) {
    fbb_.AddStruct(EntitySpawn::VT_POSITION, position);
  }
  void add_direction(const spire::net::packet::Vector2 *direction) {
    fbb_.AddStruct(EntitySpawn::VT_DIRECTION, direction);
  }
  void add_entity_name(::flatbuffers::Offset<::flatbuffers::String> entity_name) {
    fbb_.AddOffset(EntitySpawn::VT_ENTITY_NAME, entity_name);
  }
  explicit EntitySpawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntitySpawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntitySpawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntitySpawn> CreateEntitySpawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    spire::net::packet::EntityType entity_type = spire::net::packet::EntityType::NONE,
    uint32_t entity_id = 0,
    const spire::net::packet::Vector2 *position = nullptr,
    const spire::net::packet::Vector2 *direction = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> entity_name = 0) {
  EntitySpawnBuilder builder_(_fbb);
  builder_.add_entity_name(entity_name);
  builder_.add_direction(direction);
  builder_.add_position(position);
  builder_.add_entity_id(entity_id);
  builder_.add_entity_type(entity_type);
  return builder_.Finish();
}

struct EntitySpawn::Traits {
  using type = EntitySpawn;
  static auto constexpr Create = CreateEntitySpawn;
};

inline ::flatbuffers::Offset<EntitySpawn> CreateEntitySpawnDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    spire::net::packet::EntityType entity_type = spire::net::packet::EntityType::NONE,
    uint32_t entity_id = 0,
    const spire::net::packet::Vector2 *position = nullptr,
    const spire::net::packet::Vector2 *direction = nullptr,
    const char *entity_name = nullptr) {
  auto entity_name__ = entity_name ? _fbb.CreateString(entity_name) : 0;
  return spire::net::packet::CreateEntitySpawn(
      _fbb,
      entity_type,
      entity_id,
      position,
      direction,
      entity_name__);
}

inline const spire::net::packet::EntitySpawn *GetEntitySpawn(const void *buf) {
  return ::flatbuffers::GetRoot<spire::net::packet::EntitySpawn>(buf);
}

inline const spire::net::packet::EntitySpawn *GetSizePrefixedEntitySpawn(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<spire::net::packet::EntitySpawn>(buf);
}

inline bool VerifyEntitySpawnBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<spire::net::packet::EntitySpawn>(nullptr);
}

inline bool VerifySizePrefixedEntitySpawnBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<spire::net::packet::EntitySpawn>(nullptr);
}

inline void FinishEntitySpawnBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntitySpawn> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntitySpawnBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntitySpawn> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packet
}  // namespace net
}  // namespace spire

#endif  // FLATBUFFERS_GENERATED_ENTITYSPAWN_SPIRE_NET_PACKET_H_
