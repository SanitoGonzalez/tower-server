// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYMOVEMENT_SPIRE_NET_PACKET_H_
#define FLATBUFFERS_GENERATED_ENTITYMOVEMENT_SPIRE_NET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace spire {
namespace net {
namespace packet {

struct EntityMovement;
struct EntityMovementBuilder;

struct EntityMovement FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityMovementBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_ID = 4,
    VT_POSITION = 6,
    VT_DIRECTION = 8
  };
  uint32_t entity_id() const {
    return GetField<uint32_t>(VT_ENTITY_ID, 0);
  }
  const spire::net::packet::Vector2 *position() const {
    return GetStruct<const spire::net::packet::Vector2 *>(VT_POSITION);
  }
  const spire::net::packet::Vector2 *direction() const {
    return GetStruct<const spire::net::packet::Vector2 *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ENTITY_ID, 4) &&
           VerifyField<spire::net::packet::Vector2>(verifier, VT_POSITION, 4) &&
           VerifyField<spire::net::packet::Vector2>(verifier, VT_DIRECTION, 4) &&
           verifier.EndTable();
  }
};

struct EntityMovementBuilder {
  typedef EntityMovement Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entity_id(uint32_t entity_id) {
    fbb_.AddElement<uint32_t>(EntityMovement::VT_ENTITY_ID, entity_id, 0);
  }
  void add_position(const spire::net::packet::Vector2 *position) {
    fbb_.AddStruct(EntityMovement::VT_POSITION, position);
  }
  void add_direction(const spire::net::packet::Vector2 *direction) {
    fbb_.AddStruct(EntityMovement::VT_DIRECTION, direction);
  }
  explicit EntityMovementBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityMovement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityMovement>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityMovement> CreateEntityMovement(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t entity_id = 0,
    const spire::net::packet::Vector2 *position = nullptr,
    const spire::net::packet::Vector2 *direction = nullptr) {
  EntityMovementBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_position(position);
  builder_.add_entity_id(entity_id);
  return builder_.Finish();
}

struct EntityMovement::Traits {
  using type = EntityMovement;
  static auto constexpr Create = CreateEntityMovement;
};

inline const spire::net::packet::EntityMovement *GetEntityMovement(const void *buf) {
  return ::flatbuffers::GetRoot<spire::net::packet::EntityMovement>(buf);
}

inline const spire::net::packet::EntityMovement *GetSizePrefixedEntityMovement(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<spire::net::packet::EntityMovement>(buf);
}

inline bool VerifyEntityMovementBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<spire::net::packet::EntityMovement>(nullptr);
}

inline bool VerifySizePrefixedEntityMovementBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<spire::net::packet::EntityMovement>(nullptr);
}

inline void FinishEntityMovementBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityMovement> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityMovementBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityMovement> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packet
}  // namespace net
}  // namespace spire

#endif  // FLATBUFFERS_GENERATED_ENTITYMOVEMENT_SPIRE_NET_PACKET_H_
