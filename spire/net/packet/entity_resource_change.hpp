// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYRESOURCECHANGE_SPIRE_NET_PACKET_H_
#define FLATBUFFERS_GENERATED_ENTITYRESOURCECHANGE_SPIRE_NET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace spire {
namespace net {
namespace packet {

struct EntityResourceChange;
struct EntityResourceChangeBuilder;

enum class EntityResourceChangeType : uint8_t {
  NONE = 0,
  DAMAGE = 1,
  RECOVER = 2,
  MIN = NONE,
  MAX = RECOVER
};

inline const EntityResourceChangeType (&EnumValuesEntityResourceChangeType())[3] {
  static const EntityResourceChangeType values[] = {
    EntityResourceChangeType::NONE,
    EntityResourceChangeType::DAMAGE,
    EntityResourceChangeType::RECOVER
  };
  return values;
}

inline const char * const *EnumNamesEntityResourceChangeType() {
  static const char * const names[4] = {
    "NONE",
    "DAMAGE",
    "RECOVER",
    nullptr
  };
  return names;
}

inline const char *EnumNameEntityResourceChangeType(EntityResourceChangeType e) {
  if (::flatbuffers::IsOutRange(e, EntityResourceChangeType::NONE, EntityResourceChangeType::RECOVER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEntityResourceChangeType()[index];
}

struct EntityResourceChange FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityResourceChangeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANGE_TYPE = 4,
    VT_RESOURCE_TYPE = 6,
    VT_ENTITY_ID = 8,
    VT_AMOUNT = 10
  };
  spire::net::packet::EntityResourceChangeType change_type() const {
    return static_cast<spire::net::packet::EntityResourceChangeType>(GetField<uint8_t>(VT_CHANGE_TYPE, 0));
  }
  spire::net::packet::EntityResourceType resource_type() const {
    return static_cast<spire::net::packet::EntityResourceType>(GetField<uint8_t>(VT_RESOURCE_TYPE, 0));
  }
  uint32_t entity_id() const {
    return GetField<uint32_t>(VT_ENTITY_ID, 0);
  }
  int32_t amount() const {
    return GetField<int32_t>(VT_AMOUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CHANGE_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_RESOURCE_TYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_ENTITY_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_AMOUNT, 4) &&
           verifier.EndTable();
  }
};

struct EntityResourceChangeBuilder {
  typedef EntityResourceChange Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_change_type(spire::net::packet::EntityResourceChangeType change_type) {
    fbb_.AddElement<uint8_t>(EntityResourceChange::VT_CHANGE_TYPE, static_cast<uint8_t>(change_type), 0);
  }
  void add_resource_type(spire::net::packet::EntityResourceType resource_type) {
    fbb_.AddElement<uint8_t>(EntityResourceChange::VT_RESOURCE_TYPE, static_cast<uint8_t>(resource_type), 0);
  }
  void add_entity_id(uint32_t entity_id) {
    fbb_.AddElement<uint32_t>(EntityResourceChange::VT_ENTITY_ID, entity_id, 0);
  }
  void add_amount(int32_t amount) {
    fbb_.AddElement<int32_t>(EntityResourceChange::VT_AMOUNT, amount, 0);
  }
  explicit EntityResourceChangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityResourceChange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityResourceChange>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityResourceChange> CreateEntityResourceChange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    spire::net::packet::EntityResourceChangeType change_type = spire::net::packet::EntityResourceChangeType::NONE,
    spire::net::packet::EntityResourceType resource_type = spire::net::packet::EntityResourceType::NONE,
    uint32_t entity_id = 0,
    int32_t amount = 0) {
  EntityResourceChangeBuilder builder_(_fbb);
  builder_.add_amount(amount);
  builder_.add_entity_id(entity_id);
  builder_.add_resource_type(resource_type);
  builder_.add_change_type(change_type);
  return builder_.Finish();
}

struct EntityResourceChange::Traits {
  using type = EntityResourceChange;
  static auto constexpr Create = CreateEntityResourceChange;
};

inline const spire::net::packet::EntityResourceChange *GetEntityResourceChange(const void *buf) {
  return ::flatbuffers::GetRoot<spire::net::packet::EntityResourceChange>(buf);
}

inline const spire::net::packet::EntityResourceChange *GetSizePrefixedEntityResourceChange(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<spire::net::packet::EntityResourceChange>(buf);
}

inline bool VerifyEntityResourceChangeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<spire::net::packet::EntityResourceChange>(nullptr);
}

inline bool VerifySizePrefixedEntityResourceChangeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<spire::net::packet::EntityResourceChange>(nullptr);
}

inline void FinishEntityResourceChangeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityResourceChange> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityResourceChangeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityResourceChange> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packet
}  // namespace net
}  // namespace spire

#endif  // FLATBUFFERS_GENERATED_ENTITYRESOURCECHANGE_SPIRE_NET_PACKET_H_
