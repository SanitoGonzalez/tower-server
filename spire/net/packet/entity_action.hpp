// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYACTION_SPIRE_NET_PACKET_H_
#define FLATBUFFERS_GENERATED_ENTITYACTION_SPIRE_NET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace spire {
namespace net {
namespace packet {

struct EntityAction;
struct EntityActionBuilder;

struct EntityAction FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityActionBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_TYPE = 4,
    VT_ENTITY_ID = 6,
    VT_TARGET_ENTITY_ID = 8,
    VT_TARGET_POSITION = 10,
    VT_TARGET_DIRECTION = 12
  };
  spire::net::packet::EntityActionType action_type() const {
    return static_cast<spire::net::packet::EntityActionType>(GetField<uint16_t>(VT_ACTION_TYPE, 0));
  }
  uint32_t entity_id() const {
    return GetField<uint32_t>(VT_ENTITY_ID, 0);
  }
  uint32_t target_entity_id() const {
    return GetField<uint32_t>(VT_TARGET_ENTITY_ID, 0);
  }
  const spire::net::packet::Vector2 *target_position() const {
    return GetStruct<const spire::net::packet::Vector2 *>(VT_TARGET_POSITION);
  }
  const spire::net::packet::Vector2 *target_direction() const {
    return GetStruct<const spire::net::packet::Vector2 *>(VT_TARGET_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ACTION_TYPE, 2) &&
           VerifyField<uint32_t>(verifier, VT_ENTITY_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_TARGET_ENTITY_ID, 4) &&
           VerifyField<spire::net::packet::Vector2>(verifier, VT_TARGET_POSITION, 4) &&
           VerifyField<spire::net::packet::Vector2>(verifier, VT_TARGET_DIRECTION, 4) &&
           verifier.EndTable();
  }
};

struct EntityActionBuilder {
  typedef EntityAction Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_action_type(spire::net::packet::EntityActionType action_type) {
    fbb_.AddElement<uint16_t>(EntityAction::VT_ACTION_TYPE, static_cast<uint16_t>(action_type), 0);
  }
  void add_entity_id(uint32_t entity_id) {
    fbb_.AddElement<uint32_t>(EntityAction::VT_ENTITY_ID, entity_id, 0);
  }
  void add_target_entity_id(uint32_t target_entity_id) {
    fbb_.AddElement<uint32_t>(EntityAction::VT_TARGET_ENTITY_ID, target_entity_id, 0);
  }
  void add_target_position(const spire::net::packet::Vector2 *target_position) {
    fbb_.AddStruct(EntityAction::VT_TARGET_POSITION, target_position);
  }
  void add_target_direction(const spire::net::packet::Vector2 *target_direction) {
    fbb_.AddStruct(EntityAction::VT_TARGET_DIRECTION, target_direction);
  }
  explicit EntityActionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityAction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityAction>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityAction> CreateEntityAction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    spire::net::packet::EntityActionType action_type = spire::net::packet::EntityActionType::NONE,
    uint32_t entity_id = 0,
    uint32_t target_entity_id = 0,
    const spire::net::packet::Vector2 *target_position = nullptr,
    const spire::net::packet::Vector2 *target_direction = nullptr) {
  EntityActionBuilder builder_(_fbb);
  builder_.add_target_direction(target_direction);
  builder_.add_target_position(target_position);
  builder_.add_target_entity_id(target_entity_id);
  builder_.add_entity_id(entity_id);
  builder_.add_action_type(action_type);
  return builder_.Finish();
}

struct EntityAction::Traits {
  using type = EntityAction;
  static auto constexpr Create = CreateEntityAction;
};

inline const spire::net::packet::EntityAction *GetEntityAction(const void *buf) {
  return ::flatbuffers::GetRoot<spire::net::packet::EntityAction>(buf);
}

inline const spire::net::packet::EntityAction *GetSizePrefixedEntityAction(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<spire::net::packet::EntityAction>(buf);
}

inline bool VerifyEntityActionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<spire::net::packet::EntityAction>(nullptr);
}

inline bool VerifySizePrefixedEntityActionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<spire::net::packet::EntityAction>(nullptr);
}

inline void FinishEntityActionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityAction> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityActionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityAction> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packet
}  // namespace net
}  // namespace spire

#endif  // FLATBUFFERS_GENERATED_ENTITYACTION_SPIRE_NET_PACKET_H_
