// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYTRANSFORMUPDATE_SPIRE_NET_PACKET_H_
#define FLATBUFFERS_GENERATED_ENTITYTRANSFORMUPDATE_SPIRE_NET_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace spire {
namespace net {
namespace packet {

struct EntityTransform;

struct EntityTransformUpdate;
struct EntityTransformUpdateBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) EntityTransform FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t entity_id_;
  spire::net::packet::Vector2 position_;

 public:
  struct Traits;
  EntityTransform()
      : entity_id_(0),
        position_() {
  }
  EntityTransform(uint32_t _entity_id, const spire::net::packet::Vector2 &_position)
      : entity_id_(::flatbuffers::EndianScalar(_entity_id)),
        position_(_position) {
  }
  uint32_t entity_id() const {
    return ::flatbuffers::EndianScalar(entity_id_);
  }
  const spire::net::packet::Vector2 &position() const {
    return position_;
  }
};
FLATBUFFERS_STRUCT_END(EntityTransform, 12);

struct EntityTransform::Traits {
  using type = EntityTransform;
};

struct EntityTransformUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityTransformUpdateBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_TRANSFORMS = 4
  };
  const ::flatbuffers::Vector<const spire::net::packet::EntityTransform *> *entity_transforms() const {
    return GetPointer<const ::flatbuffers::Vector<const spire::net::packet::EntityTransform *> *>(VT_ENTITY_TRANSFORMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITY_TRANSFORMS) &&
           verifier.VerifyVector(entity_transforms()) &&
           verifier.EndTable();
  }
};

struct EntityTransformUpdateBuilder {
  typedef EntityTransformUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entity_transforms(::flatbuffers::Offset<::flatbuffers::Vector<const spire::net::packet::EntityTransform *>> entity_transforms) {
    fbb_.AddOffset(EntityTransformUpdate::VT_ENTITY_TRANSFORMS, entity_transforms);
  }
  explicit EntityTransformUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityTransformUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityTransformUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityTransformUpdate> CreateEntityTransformUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const spire::net::packet::EntityTransform *>> entity_transforms = 0) {
  EntityTransformUpdateBuilder builder_(_fbb);
  builder_.add_entity_transforms(entity_transforms);
  return builder_.Finish();
}

struct EntityTransformUpdate::Traits {
  using type = EntityTransformUpdate;
  static auto constexpr Create = CreateEntityTransformUpdate;
};

inline ::flatbuffers::Offset<EntityTransformUpdate> CreateEntityTransformUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<spire::net::packet::EntityTransform> *entity_transforms = nullptr) {
  auto entity_transforms__ = entity_transforms ? _fbb.CreateVectorOfStructs<spire::net::packet::EntityTransform>(*entity_transforms) : 0;
  return spire::net::packet::CreateEntityTransformUpdate(
      _fbb,
      entity_transforms__);
}

inline const spire::net::packet::EntityTransformUpdate *GetEntityTransformUpdate(const void *buf) {
  return ::flatbuffers::GetRoot<spire::net::packet::EntityTransformUpdate>(buf);
}

inline const spire::net::packet::EntityTransformUpdate *GetSizePrefixedEntityTransformUpdate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<spire::net::packet::EntityTransformUpdate>(buf);
}

inline bool VerifyEntityTransformUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<spire::net::packet::EntityTransformUpdate>(nullptr);
}

inline bool VerifySizePrefixedEntityTransformUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<spire::net::packet::EntityTransformUpdate>(nullptr);
}

inline void FinishEntityTransformUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityTransformUpdate> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityTransformUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<spire::net::packet::EntityTransformUpdate> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packet
}  // namespace net
}  // namespace spire

#endif  // FLATBUFFERS_GENERATED_ENTITYTRANSFORMUPDATE_SPIRE_NET_PACKET_H_
