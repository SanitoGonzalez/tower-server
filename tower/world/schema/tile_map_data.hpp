// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TILEMAPDATA_TOWER_WORLD_SCHEMA_H_
#define FLATBUFFERS_GENERATED_TILEMAPDATA_TOWER_WORLD_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace tower {
namespace world {
namespace schema {

struct TileMapData;
struct TileMapDataBuilder;

struct TileMapData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TileMapDataBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SIZE = 6,
    VT_TILES = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const tower::world::Vector2i *size() const {
    return GetStruct<const tower::world::Vector2i *>(VT_SIZE);
  }
  const ::flatbuffers::Vector<const tower::world::TileData *> *tiles() const {
    return GetPointer<const ::flatbuffers::Vector<const tower::world::TileData *> *>(VT_TILES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<tower::world::Vector2i>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_TILES) &&
           verifier.VerifyVector(tiles()) &&
           verifier.EndTable();
  }
};

struct TileMapDataBuilder {
  typedef TileMapData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(TileMapData::VT_NAME, name);
  }
  void add_size(const tower::world::Vector2i *size) {
    fbb_.AddStruct(TileMapData::VT_SIZE, size);
  }
  void add_tiles(::flatbuffers::Offset<::flatbuffers::Vector<const tower::world::TileData *>> tiles) {
    fbb_.AddOffset(TileMapData::VT_TILES, tiles);
  }
  explicit TileMapDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TileMapData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TileMapData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TileMapData> CreateTileMapData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    const tower::world::Vector2i *size = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<const tower::world::TileData *>> tiles = 0) {
  TileMapDataBuilder builder_(_fbb);
  builder_.add_tiles(tiles);
  builder_.add_size(size);
  builder_.add_name(name);
  return builder_.Finish();
}

struct TileMapData::Traits {
  using type = TileMapData;
  static auto constexpr Create = CreateTileMapData;
};

inline ::flatbuffers::Offset<TileMapData> CreateTileMapDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const tower::world::Vector2i *size = nullptr,
    const std::vector<tower::world::TileData> *tiles = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto tiles__ = tiles ? _fbb.CreateVectorOfStructs<tower::world::TileData>(*tiles) : 0;
  return tower::world::schema::CreateTileMapData(
      _fbb,
      name__,
      size,
      tiles__);
}

inline const tower::world::schema::TileMapData *GetTileMapData(const void *buf) {
  return ::flatbuffers::GetRoot<tower::world::schema::TileMapData>(buf);
}

inline const tower::world::schema::TileMapData *GetSizePrefixedTileMapData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<tower::world::schema::TileMapData>(buf);
}

inline bool VerifyTileMapDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tower::world::schema::TileMapData>(nullptr);
}

inline bool VerifySizePrefixedTileMapDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tower::world::schema::TileMapData>(nullptr);
}

inline void FinishTileMapDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<tower::world::schema::TileMapData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTileMapDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<tower::world::schema::TileMapData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace world
}  // namespace tower

#endif  // FLATBUFFERS_GENERATED_TILEMAPDATA_TOWER_WORLD_SCHEMA_H_
