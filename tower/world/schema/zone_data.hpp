// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ZONEDATA_TOWER_WORLD_SCHEMA_H_
#define FLATBUFFERS_GENERATED_ZONEDATA_TOWER_WORLD_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "types.hpp"

namespace tower {
namespace world {
namespace schema {

struct ObjectData;

struct ZoneData;
struct ZoneDataBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ObjectData FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t type_;
  int16_t padding0__;
  uint32_t id_;
  tower::world::Vector2i position_;
  float rotation_;
  uint32_t owner_;

 public:
  struct Traits;
  ObjectData()
      : type_(0),
        padding0__(0),
        id_(0),
        position_(),
        rotation_(0),
        owner_(0) {
    (void)padding0__;
  }
  ObjectData(tower::world::ObjectType _type, uint32_t _id, const tower::world::Vector2i &_position, float _rotation, uint32_t _owner)
      : type_(::flatbuffers::EndianScalar(static_cast<uint16_t>(_type))),
        padding0__(0),
        id_(::flatbuffers::EndianScalar(_id)),
        position_(_position),
        rotation_(::flatbuffers::EndianScalar(_rotation)),
        owner_(::flatbuffers::EndianScalar(_owner)) {
    (void)padding0__;
  }
  tower::world::ObjectType type() const {
    return static_cast<tower::world::ObjectType>(::flatbuffers::EndianScalar(type_));
  }
  uint32_t id() const {
    return ::flatbuffers::EndianScalar(id_);
  }
  const tower::world::Vector2i &position() const {
    return position_;
  }
  float rotation() const {
    return ::flatbuffers::EndianScalar(rotation_);
  }
  uint32_t owner() const {
    return ::flatbuffers::EndianScalar(owner_);
  }
};
FLATBUFFERS_STRUCT_END(ObjectData, 24);

struct ObjectData::Traits {
  using type = ObjectData;
};

struct ZoneData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ZoneDataBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SIZE = 6,
    VT_TILES = 8,
    VT_OBJECTS = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const tower::world::Vector2i *size() const {
    return GetStruct<const tower::world::Vector2i *>(VT_SIZE);
  }
  const ::flatbuffers::Vector<const tower::world::TileData *> *tiles() const {
    return GetPointer<const ::flatbuffers::Vector<const tower::world::TileData *> *>(VT_TILES);
  }
  const ::flatbuffers::Vector<const tower::world::schema::ObjectData *> *objects() const {
    return GetPointer<const ::flatbuffers::Vector<const tower::world::schema::ObjectData *> *>(VT_OBJECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<tower::world::Vector2i>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_TILES) &&
           verifier.VerifyVector(tiles()) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.EndTable();
  }
};

struct ZoneDataBuilder {
  typedef ZoneData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(ZoneData::VT_ID, id, 0);
  }
  void add_size(const tower::world::Vector2i *size) {
    fbb_.AddStruct(ZoneData::VT_SIZE, size);
  }
  void add_tiles(::flatbuffers::Offset<::flatbuffers::Vector<const tower::world::TileData *>> tiles) {
    fbb_.AddOffset(ZoneData::VT_TILES, tiles);
  }
  void add_objects(::flatbuffers::Offset<::flatbuffers::Vector<const tower::world::schema::ObjectData *>> objects) {
    fbb_.AddOffset(ZoneData::VT_OBJECTS, objects);
  }
  explicit ZoneDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ZoneData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ZoneData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ZoneData> CreateZoneData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const tower::world::Vector2i *size = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<const tower::world::TileData *>> tiles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const tower::world::schema::ObjectData *>> objects = 0) {
  ZoneDataBuilder builder_(_fbb);
  builder_.add_objects(objects);
  builder_.add_tiles(tiles);
  builder_.add_size(size);
  builder_.add_id(id);
  return builder_.Finish();
}

struct ZoneData::Traits {
  using type = ZoneData;
  static auto constexpr Create = CreateZoneData;
};

inline ::flatbuffers::Offset<ZoneData> CreateZoneDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const tower::world::Vector2i *size = nullptr,
    const std::vector<tower::world::TileData> *tiles = nullptr,
    const std::vector<tower::world::schema::ObjectData> *objects = nullptr) {
  auto tiles__ = tiles ? _fbb.CreateVectorOfStructs<tower::world::TileData>(*tiles) : 0;
  auto objects__ = objects ? _fbb.CreateVectorOfStructs<tower::world::schema::ObjectData>(*objects) : 0;
  return tower::world::schema::CreateZoneData(
      _fbb,
      id,
      size,
      tiles__,
      objects__);
}

inline const tower::world::schema::ZoneData *GetZoneData(const void *buf) {
  return ::flatbuffers::GetRoot<tower::world::schema::ZoneData>(buf);
}

inline const tower::world::schema::ZoneData *GetSizePrefixedZoneData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<tower::world::schema::ZoneData>(buf);
}

inline bool VerifyZoneDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tower::world::schema::ZoneData>(nullptr);
}

inline bool VerifySizePrefixedZoneDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tower::world::schema::ZoneData>(nullptr);
}

inline void FinishZoneDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<tower::world::schema::ZoneData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedZoneDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<tower::world::schema::ZoneData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace world
}  // namespace tower

#endif  // FLATBUFFERS_GENERATED_ZONEDATA_TOWER_WORLD_SCHEMA_H_
